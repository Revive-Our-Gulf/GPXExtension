name: Deploy StatusTool Extension

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    paths:
      - 'app/StatusTool/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/gpx-status
          VERSION=${GITHUB_REF#refs/tags/}
          
          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi
          
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "buildx_args=\
            --build-arg IMAGE_NAME='gpx-status' \
            --build-arg AUTHOR='${{ github.actor }}' \
            --build-arg MAINTAINER='${{ github.repository_owner }}' \
            --build-arg REPO='${{ github.repository }}' \
            --cache-from 'type=local,src=/tmp/.buildx-cache' \
            --cache-to 'type=local,dest=/tmp/.buildx-cache' \
            ${TAGS} \
            --file './app/StatusTool/Dockerfile' ." >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0-28
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-gpx-status-${{ hashFiles('app/StatusTool/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-gpx-status-

      - name: Pull latest images
        run: |
          docker pull --platform 'linux/arm64/v8' ${{ secrets.DOCKER_USERNAME }}/gpx-status:latest || true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Buildx (build and push)
        run: |
          docker buildx build \
            --output "type=image,push=true" \
            --platform 'linux/arm64/v8' \
            ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Create artifacts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          GIT_HASH_SHORT=$(git rev-parse --short "$GITHUB_SHA")
          docker buildx build \
            ${{ steps.prepare.outputs.buildx_args }} \
            --platform "linux/arm64/v8" \
            --tag ${{ steps.prepare.outputs.docker_image }}:${GIT_HASH_SHORT} \
            --output "type=docker,dest=gpx-status-${GIT_HASH_SHORT}-arm64-v8.tar"

      - name: Upload release artifacts
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar'
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
          file_glob: true